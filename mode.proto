syntax = "proto3";
import "barrage.proto";
package game.proto;
option go_package = "danceTwoTiktok/proto;api";

enum ModelType{
  MODEL_TYPE_DEFAULT = 0; //阵营模式
  //  MODEL_TYPE_GUEST = 1;    //访客模式
  //  MODEL_TYPE_TOKEN = 2;   //密钥登录
}

//------------------------------------创建模式----------
//创建模式请求
message CreateModelRequest {
  int32 model_type = 1; // 创建模式 1:默认模式;2:组合模式;3:结婚模式
  int32 model_category = 2; // 创建模式 1:默认模式;2:无限模式
  int32 question_bank = 3;  // 题库， 0=随机or其他1~5
}

//登录响应
message CreateModelResponse {
  string model_id = 1; //模式id
}

//模式结束协议
message EndModelRequest {
  string model_id = 1; // 模式id 1:默认模式
  int64 model_category = 2; // 创建模式 1:有限模式;2:无限模式
}
message EndModelResponse {
}

//登录响应,返回世界排名
message WeekRankSingleRequest {
  int32 type = 1; // 1=上周 2=本周
  int32 count = 2;
}


message WeekRankSingleResponse {
  repeated WeekRankSingleItem list = 1; //
}


message WeekRankSingleItem {
  string name = 1; //主动at人的id
  string avatar = 2; //主动
  int64 score = 3; //个人主动积分-历史
  int32 rank = 4;
}
//-------------------------------
//登录响应,返回世界排名
message WeekRankCoupleRequest {
  int32 type = 1;
  int32 count = 2;
}


//获取排名前多少的用户
message WeekRankCoupleResponse {
  repeated WeekRankCoupleItem list = 1; //
}
message WeekRankCoupleItem {
  WeekRankCouplePlayer role1 = 1; //主动at人的id
  WeekRankCouplePlayer role2 = 2; //主动at人的id
  int64 score = 3; //cp分
  int32 rank = 4;
}
message WeekRankCouplePlayer {
  string name = 1; //主动at人的id
  string avatar = 2; //头像
}



//补特效协议
message AsyncSpecialEffectsRequest {
  repeated SpecialEffectsItem async_special_effects_item = 1; //特效列表
}
message AsyncSpecialEffectsResponse {
}

//同步服饰
message AsyncClothRequest {
  string uid_id = 1; //用户id
  int32  sex = 2; //性别;1:男;2:女
  repeated int64 current_element_nos = 9; //当前穿搭
}
message AsyncClothResponse {
}

//同步头像
message AsyncHeadRequest {
  string uid_id = 1; //用户id
  int64 current_element_no = 9; //当前穿搭
}
message AsyncHeadResponse {
}

//同步称号
message AsyncTitleRequest {
  string uid_id = 1; //用户id
  int64  current_element_nos = 9; //当前穿搭
}
message AsyncTitleResponse {
}





//cp,和之前的cp一样
message CpLinkRequest {
  string user_id = 2; // 用户id
  string user_id_other = 3; // 用户id
}
message CpLinkResponse {
  bool is_success = 1;  //true,成功，false:失败
  int64   current_model_total_score = 2; //当局cp的总积分
}

//解散cp
message CpBreakRequest {
  string user_id = 2; // 用户id
  string user_id_other = 3; // 用户id
}
message CpBreakResponse {
  bool is_success = 1;  //true,成功，false:失败
}




//主播踢人，服务端要删除人，要判断cp装填，返回false,加error_code
message KickOutRequest {
  string user_id = 2; // 用户id
}
message KickOutResponse {
  bool is_success = 1;  //true,成功，false:失败
}
